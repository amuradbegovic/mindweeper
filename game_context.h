#pragma once

#include <SDL3/SDL.h>

#include "game_logic.h"
#include "sprite_sheet.h"
#include "ui.h"
#include "config.h"

typedef enum {
    Smiley_selected, Victory, Loss, Tile_selected, Playing 
} GameState;

typedef struct {
    SDL_Window *window;                         /* Created by CreateGameContext() */
    SDL_Renderer *renderer;                     /* Created by CreateGameContext() */

    IconTheme *icon_theme;                      /* Supplied to CreateGameContext() */
    ColorScheme color_scheme;                   /* Supplied to CreateGameContext() */
    GameUIRects game_ui_rects;                  /* Generated by CreateGameContext() and from game_grid*/

    GameGrid *game_grid;                        /* Created with SetContextGameGrid() */
    int selected_tile_row, selected_tile_col;   /* Generated from user interaction */

    GameState game_state;                       /* Set to Playing at the beginning */
    SDL_TimerID timer_id;                       /* Created on the first user interaction with current game */
    int elapsed_time; 
} GameContext;

//GameContext *CreateGameContext(ColorScheme color_scheme, const char *digits_file, const char *smileys_file, const char *tiles_file);
GameContext *CreateGameContext(Config cfg);

void DestroyGameContext(GameContext *ctx);
bool SetContextGameGrid(GameContext *ctx, int w, int h, int mine_count);
bool SetContextGameGridWithDifficulty(GameContext *ctx, Difficulty dif);

void DrawGameBackground(GameContext *ctx);
void DrawGameGrid(GameContext *ctx);

void DrawGameFrame(GameContext *ctx);

void SelectTileFromCursorPosition(GameContext *ctx, int mouse_x, int mouse_y);

void RestartGame(GameContext *ctx);

bool GameOver(GameContext *ctx);

Uint32 IncrementElapsedTime(void *ctx, SDL_TimerID timer_id, Uint32 interval);
void StartTimer(GameContext *ctx);
void StopTimer(GameContext *ctx);
